<?php
/**
 * @file
 * Create tokens and integrate with pathauto alias generation.
 */

/**
 * Implements hook_enable().
 */
function ding_path_alias_enable() {
  // New module weights in core: put devel as the very last in the chain.
  db_update('system')
    ->fields(array(
      'weight' => 1,
    ))
    ->condition('type', 'module')
    ->condition('name', 'ding_path_alias')
    ->execute();
}

/**
 * Implements hook_token_info().
 */
function ding_path_alias_token_info() {
  $info['types']['og-field'] = array(
    'name' => t('Organic group field'),
    'description' => t('Organic group field holding relation to a group.'),
  );

  $info['tokens']['og-field']['gid'] = array(
    'name' => t('Organic groups group ID'),
    'description' => t('The unique ID of the organic groups group.'),
    'type' => 'integer',
  );

  $info['tokens']['og-field']['node'] = array(
    'name' => t('Organic groups node'),
    'description' => t('The node of the organic group if any.'),
    'type' => 'node',
  );

  return $info;
}

/**
 * Implements hook_token_info_alter().
 */
function ding_path_alias_token_info_alter(&$info) {
  $info['tokens']['node']['ding_event_library']['type'] = 'og-field';
  $info['tokens']['node']['ding_news_library']['type'] = 'og-field';
  dpm($info);
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ding_path_alias_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if ($node->type == 'ding_event') {
      $tokens = token_find_with_prefix($tokens, 'ding_event_library');
      $gid = $node->ding_event_library['und'][0]['gid'];
    }
    elseif ($node->type == 'ding_news') {
      $tokens = token_find_with_prefix($tokens, 'ding_news_library');
      $gid = $node->ding_news_library['und'][0]['gid'];
    }

    // Add gid if needed.
    foreach ($tokens as $name => $original) {
      if ($name == 'gid') {
        $replacements[$original] = $gid;
      }
    }

    // Add node tokens.
    if ($node_tokens = token_find_with_prefix($tokens, 'node')) {
      $group = og_load($gid);
      if ($group->entity_type == 'node') {
        $group_node = node_load($group->etid);
        $replacements += token_generate('node', $node_tokens, array('node' => $group_node), $options);
      }
    }
  }
  return $replacements;
}


